/*==========================================================================
--------------------------------------------------
Program: ESQUI
Info and Bugs: {marf,jballesteros}@itccanarias.org
url: http://motivando.me
--------------------------------------------------

Copyright (c) 2006-2007, Center for Technology in Medicine (CTM),
University of Las Palmas de Gran Canaria (ULPGC), Canary Islands, Spain.
Copyright (c) 2007-2010, Institute of Technology at CanaryIslands (ITC),
Canary Islands, Spain.

This software is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License (LGPL) as published
by the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1) Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2) Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
==========================================================================*/
#ifndef __vtkGetFEMInterface_h
#define __vtkGetFEMInterface_h

#include "vtkFEMSystemWin32Header.h"
#include "vtkObject.h"

#include "bgeot_mesh_structure.h"
#include "getfem_mesh.h"
#include "getfem_mesh_fem.h"
#include "getfem/getfem_config.h"
#include "getfem/getfem_assembling.h" /* import assembly methods (and norms comp.) */
#include "getfem/getfem_import.h"
#include "getfem/getfem_export.h"   /* export functions (save solution in a file)  */
#include "getfem/getfem_regular_meshes.h"
#include "getfem/getfem_model_solvers.h"
#include "gmm/gmm.h"
#include "getfem/getfem_interpolation.h"

class vtkPolyData;

/*Some GetFEM types*/
using bgeot::base_small_vector; /* special class for small (dim<16) vectors */
using bgeot::base_node;  /* geometrical nodes(derived from base_small_vector)*/
using bgeot::scalar_type; /* = double */
using bgeot::size_type;   /* = unsigned long */
using bgeot::dim_type;
using bgeot::base_matrix; /* small dense matrix. */
using bgeot::pgeometric_trans;

/*Some Typedefs*/
typedef bgeot::base_node getFEMPoint;
typedef bgeot::base_small_vector getFEMVector;
typedef getfem::modeling_standard_plain_vector  plain_vector;

//! Implementation of th
/*!
 *
 */

class VTK_vtkFEMSystem_EXPORT vtkGetFEMInterface : public vtkObject
{
public:

	//!Type revision macro
	vtkTypeRevisionMacro(vtkGetFEMInterface,vtkObject);
	//! Create new particle spring system object
	static vtkGetFEMInterface * New();
	//! Print system info
	void PrintSelf(ostream& os, vtkIndent indent);

	void SetPolyData(vtkPolyData * data);

	//!Set model filename
	vtkSetStringMacro(FileName);
	vtkGetStringMacro(FileName);

	//!Set Lambda Coefficient
	vtkSetMacro(Lambda, scalar_type);
	vtkGetMacro(Lambda, scalar_type);

	//!Set Mu Coefficient
	vtkSetMacro(Mu, scalar_type);
	vtkGetMacro(Mu, scalar_type);

	//!Set Residual Error
	vtkSetMacro(Residual, scalar_type);
	vtkGetMacro(Residual, scalar_type);

	void Init();

	void Write();

	void Solve();

protected:
	vtkGetFEMInterface();
	~vtkGetFEMInterface();

	void SelectBoundaries();

	enum {DIRICHLET_BOUNDARY_NUM = 0, NEUMANN_BOUNDARY_NUM = 1};

	char * FileName;

	vtkPolyData * Data;

	getfem::mesh * Mesh;
	getfem::mesh_im * MIM; /*Integration Method*/
	getfem::mesh_fem * MF_U; /*Solution*/
	getfem::mesh_fem * MF_Mult; /*Dirichlet Condition*/
	getfem::mesh_fem * MF_RHS; /*Right Hand-side force*/
	getfem::mesh_fem * MF_P; /*Pressure*/
	getfem::model * Model;

	//Params
	size_type ElementDimension;
	size_type MeshDimension;
	scalar_type Lambda;
	scalar_type Mu;
	scalar_type Residual;

	pgeometric_trans GeometricTransformation;

private:
	vtkGetFEMInterface(const vtkGetFEMInterface&);            // Not implemented.
	void operator=(const vtkGetFEMInterface&);           // Not implemented.

	void GenerateTopologyMesh();
	void GenerateFEMMesh();
};

#endif

