# -------------------------------------------------------------------------
# Doxygen documentation batch
# -------------------------------------------------------------------------

# Path to several tools (_PROG to avoid the typical GZIP env var pb)
# Example: 
#   DOXYGEN_PROG=@DOXYGEN@        (INCLUDE(FindDoxygen.cmake))
#   GZIP_PROG=@GZIP@              (INCLUDE(FindCygwin.cmake))
#   HHC_PROG=@HTML_HELP_COMPILER@ (INCLUDE(FindHTMLHelp.cmake))
#   MV_PROG=@MV@                  (INCLUDE(FindCygwin.cmake))
#   PERL_PROG=@PERL@              (INCLUDE(FindPerl.cmake))
#   RM_PROG=@RM@                  (INCLUDE(FindCygwin.cmake))
#   TAR_PROG=@TAR@                (INCLUDE(FindCygwin.cmake))
#   WGET_PROG=@WGET@              (INCLUDE(FindWget.cmake))
#
export DOXYGEN_PROG="@DOXYGEN@"        # Doxygen
export MV_PROG="@MV@"                  # mv (Unix-like 'move/rename files')
export PERL_PROG="@PERL@"              # Perl
export RM_PROG="@RM@"                  # rm (Unix-like 'remove files')
export TAR_PROG="@TAR@"                # tar (Unix-like 'archiver')


# PROJECT_NAME:
# Documentation/project name. Used in some of the resulting file names and
# xrefs to uniquify two or more projects linked together through their 
# Doxygen's tag files. Mandatory for each documentation set.
# Note: might be the same as the doxyfile's PROJECT_NAME
# Example: 
#   PROJECT_NAME=VTK
#
export PROJECT_NAME=vtkESQui

# SOURCE_DIR:
# Source directory. The top directory of the source files.
# Example:
#   SOURCE_DIR=@VTKMY_SOURCE_DIR@
#
export SOURCE_DIR="@PROJECT_SOURCE_DIR@"
echo "Doc source dir: $SOURCE_DIR"

# REL_PATH_TO_TOP:
# Relative path from the top directory of the source files to the directory
# (or top directory) holding the files to document. Useful if several parts
# of the same source directory should be documented separately.
# Example:
#   REL_PATH_TO_TOP=.
#   REL_PATH_TO_TOP=framework/src
#
export REL_PATH_TO_TOP=.

# INTERMEDIATE_DOX_DIR:
# Directory where the intermediate Doxygen files should be stored (mainly
# these headers files converted from the VTK format to the Doxygen format).
# This directory is erased at the end of this script, unless you comment
# the corresponding line.
# DOXTEMP might be used to simplify the syntax.
# Example:
#   DOXTEMP=DOXTEMP=@VTKMY_BINARY_DIR@/Documentation/Doxygen
#   INTERMEDIATE_DOX_DIR=$DOXTEMP/dox
#
export DOXTEMP="@PROJECT_BINARY_DIR@/Documentation/Doxygen"
export INTERMEDIATE_DOX_DIR="$DOXTEMP/dox"
echo "Doc temp dir: $DOXTEMP"

# DATA_ROOT:
# Data directory. The root directory of the data files.
# Example: 
#   DATA_ROOT=@VTK_DATA_ROOT@
#
#export DATA_ROOT="@VTK_DATA_ROOT@"

# DOXYFILE:
# Path to the Doxygen configuration file (i.e. doxyfile).
# Example:
#   DOXYFILE=$DOXTEMP/doxyfile
#
export DOXYFILE="$DOXTEMP/doxyfile"

# OUTPUT_DIRECTORY ALLOW_ERASE_OUTPUT_DIRECTORY:
# Path to the Doxygen output directory (where the resulting doc is stored).
# Note: should be the same as your doxyfile's OUTPUT_DIRECTORY
# If ON, allows the output directory to be erased when some advanced output
# file have been produced (HTML Help, or TAR archive for example).
# Example:
#   OUTPUT_DIRECTORY=$DOXTEMP/doc
#   ALLOW_ERASE_OUTPUT_DIRECTORY=ON
#
export OUTPUT_DIRECTORY="$DOXTEMP/doc"
export ALLOW_ERASE_OUTPUT_DIRECTORY=ON

# ----------------------------------------------------------------------------
# Create the Doxygen doc.

if test "x$DOXYGEN_PROG" != "xNOTFOUND" ; then

    if test "x$RM_PROG" != "xNOTFOUND" ; then
        $RM_PROG -fr "$OUTPUT_DIRECTORY"
    fi

    $DOXYGEN_PROG "$DOXYFILE"
fi